<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Optimización de Ruta - Dron</title>
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
        }
        header {
            background: #0073e6;
            color: white;
            padding: 15px;
        }
        canvas {
            border: 2px solid black;
            background: #f9f9f9;
            margin-top: 20px;
        }
        .graph-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }
        button {
            margin: 5px;
            padding: 10px;
            font-size: 16px;
        }
        #results {
            margin-top: 20px;
            padding: 10px;
            background: #f8f8f8;
            border: 1px solid #ccc;
            width: 50%;
            text-align: left;
            display: inline-block;
        }
    </style>
</head>
<body>
    <header>
        <h1>Optimización de Ruta - Dron</h1>
    </header>
    <main>
        <h2>Ruta óptima para el dron</h2>
        <p>Añade nodos, conexiones con pesos y marca zonas restringidas.</p>
        <div class="graph-container">
            <canvas id="graphCanvas" width="500" height="500"></canvas>
            <button onclick="toggleMode('edge')">Añadir Conexiones</button>
            <button onclick="toggleMode('restricted')">Marcar Zonas Restringidas</button>
            <button onclick="runDijkstra()">Ejecutar Ruta Óptima</button>
            <button onclick="resetGraph()">Reiniciar</button>
            <div id="results">Resultados aparecerán aquí...</div>
        </div>
    </main>
    <script>
        let canvas = document.getElementById("graphCanvas");
        let ctx = canvas.getContext("2d");
        let nodes = [];
        let edges = [];
        let restrictedZones = new Set();
        let mode = "";
        let selectedNode = null;

        canvas.addEventListener("click", function (event) {
            let x = event.offsetX, y = event.offsetY;
            let clickedNode = findNode(x, y);

            if (mode === "restricted" && clickedNode !== null) {
                restrictedZones.add(clickedNode);
                drawGraph();
            } else if (mode === "edge") {
                if (selectedNode === null && clickedNode !== null) {
                    selectedNode = clickedNode;
                } else if (selectedNode !== null && clickedNode !== null && selectedNode !== clickedNode) {
                    let weight = parseInt(prompt("Ingrese el peso de la conexión:", "1"));
                    if (!isNaN(weight)) {
                        edges.push({ from: selectedNode, to: clickedNode, weight });
                        selectedNode = null;
                        drawGraph();
                    }
                }
            } else if (clickedNode === null) {
                nodes.push({ x, y, id: nodes.length });
                drawGraph();
            }
        });

        function findNode(x, y) {
            return nodes.find(node => Math.hypot(node.x - x, node.y - y) < 15)?.id || null;
        }

        function toggleMode(newMode) {
            mode = (mode === newMode) ? "" : newMode;
            alert(mode ? `Modo ${newMode} activado.` : "Modo desactivado.");
        }

        function runDijkstra() {
            let startNode = parseInt(prompt("Ingrese el nodo de inicio:"));
            if (isNaN(startNode) || !nodes.some(n => n.id === startNode) || restrictedZones.has(startNode)) {
                alert("Nodo inválido o restringido");
                return;
            }
            let distances = Object.fromEntries(nodes.map(n => [n.id, Infinity]));
            let visited = new Set(), queue = [{ id: startNode, distance: 0 }];
            distances[startNode] = 0;
            let results = `Ejecución de Dijkstra:\n`;
            
            while (queue.length > 0) {
                queue.sort((a, b) => a.distance - b.distance);
                let { id } = queue.shift();
                if (visited.has(id) || restrictedZones.has(id)) continue;
                visited.add(id);
                results += `Visitando nodo ${id}\n`;

                edges.filter(e => (e.from === id || e.to === id) && !restrictedZones.has(e.from) && !restrictedZones.has(e.to))
                    .forEach(edge => {
                        let neighbor = edge.from === id ? edge.to : edge.from;
                        if (!visited.has(neighbor)) {
                            let newDist = distances[id] + edge.weight;
                            if (newDist < distances[neighbor]) {
                                distances[neighbor] = newDist;
                                queue.push({ id: neighbor, distance: newDist });
                            }
                        }
                    });
            }
            document.getElementById("results").innerText = results + `\nDistancias desde ${startNode}:\n` + JSON.stringify(distances, null, 2);
        }

        function resetGraph() {
            nodes = [];
            edges = [];
            restrictedZones.clear();
            document.getElementById("results").innerText = "";
            drawGraph();
        }

        function drawGraph() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            edges.forEach(edge => {
                let from = nodes.find(n => n.id === edge.from);
                let to = nodes.find(n => n.id === edge.to);
                ctx.beginPath();
                ctx.moveTo(from.x, from.y);
                ctx.lineTo(to.x, to.y);
                ctx.strokeStyle = "black";
                ctx.stroke();
                ctx.fillText(edge.weight, (from.x + to.x) / 2, (from.y + to.y) / 2);
            });
            nodes.forEach(node => {
                ctx.beginPath();
                ctx.arc(node.x, node.y, 10, 0, Math.PI * 2);
                ctx.fillStyle = restrictedZones.has(node.id) ? "red" : "blue";
                ctx.fill();
                ctx.stroke();
                ctx.fillText(node.id, node.x + 10, node.y);
            });
        }
    </script>
</body>
</html>